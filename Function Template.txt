/*
int vColorLocation = glGetUniformLocation (shaderProgram, “outColor”); // 못찾으면 -1
glUseProgram (shaderProgram); //--- 쉐이더 사용하겠다 선언. 활성화
glUniform4f (vColorLocation, r, g, b, 1.0);


 layout (location = 1) in vec3 vColor; //location 위치를 임의로 지정. enum처럼 ㅇㅇ
 layout (location = 2) in vec4 values[4]; // 2,3,4,5 쭉 저장됨. 시작위치 지정

glBindAttribLocation로 어트리뷰트 활성화 그리고 링크. (shader)location <-> ID


 버텍스 세이더:
 int gl_VertexID: 현재 프로세스되고 있는 버텍스의 인덱스값
 vec4 gl_Position: 현 버텍스의 위치
 프래그먼트 세이더
 vec4 gl_FragCoord: 윈도우 공간에서 프래그먼트의 좌표값
 vec4 gl_FragColor: 프래그먼트 색상값
 float gl_FragDepth: 프래그먼트 깊이 값


 삼각함수
 sin, cos, tan
 asin, acos, atan
 수학함수
 pow, log, exp, sqrt, abs, max, min, round, mod, clamp, mix, step, smoothstep
 mix (a, b, t): a + t(b-a)
 step (limit, a): 0 when a < limit, 1 when a > limit
 smoothstep (a0, a1, b): 0 when b < a0, 1 when b > a1
 기하학 계산 함수
 length, distance, dot product, cross product, normalize





 glDrawArrays (GLenum mode, GLint first, Glsizei count); 바로 그리기
 glDrawElements (Glenum mode, Glsizei count, Glenum type, const Glvoid *indices) 인덱스 방식.
  glPolygonMode (GLenum face, GLenum mode); // cw, ccw
  곤 모드 설정
 face: 모드를 설정할 면 (GL_FRONT_AND_BACK)
 mode: 모드
 GL_POINT, GL_LINE, GL_FILL

*/





    //VAO
    glGenVertexArrays(1, &VAO); //--- 버텍스 array 생성
    glBindVertexArray(VAO);
    /*
     void glBindVertexArray (GLuint array);
         VAO를 바인드한다.
         array: 바인드할 버텍스 배열의 이름
        **이거 호출한 뒤에 이 뒤에 오는 모든 VBO 이 VAO에 붙는다. VAO Bind -> VBO Bind, VBO Bind -> VAO Bind -> VBO Bind ->
    */


    //VBO
    float pos[16] = { 0, 0, 0, 1,
                0.5, 0, 0, 1,
                0.5, -0.5, 0, 1,
                0, -0.5, 0, 1 };
    
    float col[16] = { 0, 1, 0, 1,
                1, 1, 0, 1,
                1, 0, 0, 1,
                0, 0, 0, 1 };
    
    unsigned int idx[6] = { 0, 3, 2,
                            0, 2, 1 };

    glGenBuffers(1, &VBO); //--- 버퍼 id를 생성 VBO에 집어넣음.
    glGenBuffers(1, &VBO_color);
    glGenBuffers(1, &EBO);
    /*
    void glGenBuffers (GLizei n, GLuint *buffers);
         버퍼 오브젝트 (VBO) 이름 생성
         n: 생성할 이름 개수
         buffers: 버퍼 오브젝트 이름을 가리키는 배열
    */
    glBindBuffer(GL_ARRAY_BUFFER, VBO); //--- 버퍼 객체에 저장할 데이터 타입 지정
    /*
    void glBindBuffer (GLenum target, GLuint buffer);
         버퍼 오브젝트를 바인드 한다.
         Target: 바인드할 버퍼 타겟 타입
         GL_ARRAY_BUFFER: 버텍스 속성
         GL_ELEMENT_ARRAY_BUFFER: 버텍스 배열 인덱스
         GL_TEXTURE_BUFFER: 텍스처 데이터 버퍼
         Buffer: 버퍼 오브젝트 이름

    */
    glBufferData(GL_ARRAY_BUFFER, sizeof(pos), pos, GL_STATIC_DRAW);
    /*
    void glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
         버퍼 오브젝트의 데이터를 생성
         target: 바인드할 버퍼 타겟 타입
         GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_TEXTURE_BUFFER…
         size: 버퍼 오브젝트의 크기
         data: 저장할 데이터를 가리키는 포인터
         usage: 저장한 데이터를 사용할 패턴
         GL_STATIC_DRAW: 한번 버텍스 데이터 업데이트 후 변경이 없는 경우 사용
         GL_STREAM_DRAW: 데이터가 그려질 때마다 변경
         GL_DYNAMIC_DRAW: 버텍스 데이터가 자주 바뀌는 경우 (애니메이션), 버텍스 데이터가 바뀔 때마다 다시 업로드 된다
    */


    GLint positionAttribute = glGetAttribLocation(testShader.shaderID, "posv");
    if (positionAttribute == -1) {
        std::cerr << "position 속성 설정 실패" << std::endl;
        return 0;
    }
    //버텍스 속성 데이터의 배열을 정의
    //glVertexAttribPointer(positionAttribute, 3, GL_FLOAT, GL_FALSE, 0, 0);
    //버텍스 속성 배열을 사용하도록 한다.
    //glEnableVertexAttribArray(positionAttribute);

    glVertexAttribPointer(positionAttribute, 4, GL_FLOAT, GL_FALSE, 0, 0); // glBindBuffer이 반드시 필요함.
    /*
    void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
         버텍스 속성 데이터의 배열을 정의
         index: 설정할 vertex 속성의 인덱스 값을 지정. (세이더에서 layout (location = 0)  속성의 위치가 0번째)
         size: 버텍스 속성의 크기 (버텍스 속성이 vec3라면 3)
         type: 데이터 타입 (vec3 라면 GL_FLOAT)
         normalized: 데이터를 정규화할지 (GL_TRUE: [0, 1] 사이의 값으로 정규화, GL_FALSE: 그대로 사용)
         stride: 연이은 vertex 속성 세트들 사이의 공백 (값이 공백없이 채워져 있다면 0, 1개 이상의 속성들이 저장되어 있다면 크기를 설정.
        예) 버텍스 vec3라면 다음 버텍스 위치는 12바이트)
         pointer: 데이터가 시작하는 위치의 오프셋 값
         각 vertex 속성은 VBO에 의해 관리되는 메모리로부터 데이터를 받는다.
         데이터를 받을 VBO (하나가 여러 VBO를 가질 수도 있음)는 glVertexAttribPointer 함수를 호출할 때 GL_ARRAY_BUFFER
        에 현재 바인딩된 VBO로 결정
         사용 예) glVertexAttribPointer (0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); 
    */
    glEnableVertexAttribArray(positionAttribute); //이거 VAO한테 활성화시키는거임
    /*
     void glEnableVertexAttribArray (GLuint index);
         버텍스 속성 배열을 사용하도록 한다.
         index: 버텍스 속성 인덱스
         사용 예) glEnableVertexAttribArray (0);
    */



    glBindBuffer(GL_ARRAY_BUFFER, VBO_color);
    glBufferData(GL_ARRAY_BUFFER, sizeof(col), col, GL_STATIC_DRAW);

    GLint colorAttribute = glGetAttribLocation(testShader.shaderID, "colv");
    if (colorAttribute == -1) {
        std::cerr << "color 속성 설정 실패" << std::endl;
        return 0;
    }

    glVertexAttribPointer(colorAttribute, 4, GL_FLOAT, GL_FALSE, 0, 0);
    glEnableVertexAttribArray(colorAttribute);


    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(idx), idx, GL_STATIC_DRAW);